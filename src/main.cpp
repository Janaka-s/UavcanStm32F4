/*
******************************************************************************
File:     main.cpp
Info:     Generated by Atollic TrueSTUDIO(R) 9.0.0   2019-12-25

The MIT License (MIT)
Copyright (c) 2018 STMicroelectronics

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************
*/

/* Includes */
#include "stm32f4xx.h"
#include "stm32f4_discovery.h"
#include <iostream>
#include <cstdlib>
#include <unistd.h>
#include <uavcan_stm32/uavcan_stm32.hpp>

static constexpr int RxQueueSize = 64;
static constexpr std::uint32_t BitRate = 1000000;

/**
 * These functions are platform dependent, so they are not included in this example.
 * Refer to the relevant platform documentation to learn how to implement them.
 */
uavcan::ICanDriver& getCanDriver();
uavcan::ISystemClock& getSystemClock();

uavcan::ISystemClock& getSystemClock()
{
    return uavcan_stm32::SystemClock::instance();
}

uavcan::ICanDriver& getCanDriver()
{
    static uavcan_stm32::CanInitHelper<RxQueueSize> can;
    static bool initialized = false;
    if (!initialized)
    {
        initialized = true;
        int res = can.init(BitRate);
        if (res < 0)
        {
            // Handle the error
        }
    }
    return can.driver;
}

/**
 * Memory pool size largely depends on the number of CAN ifaces and on application's logic.
 * Please read the documentation for the class uavcan::Node to learn more.
 */
constexpr unsigned NodeMemoryPoolSize = 16384;

typedef uavcan::Node<NodeMemoryPoolSize> Node;

/**
 * Node object will be constructed at the time of the first access.
 * Note that most library objects are noncopyable (e.g. publishers, subscribers, servers, callers, timers, ...).
 * Attempt to copy a noncopyable object causes compilation failure.
 */
static Node& getNode()
{
    static Node node(getCanDriver(), getSystemClock());
    return node;
}

/* Private macro */
/* Private variables */
/* Private function prototypes */
/* Private functions */

/**
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
  /**
  *  IMPORTANT NOTE!
  *  The symbol VECT_TAB_SRAM needs to be defined when building the project
  *  if code has been located to RAM and interrupts are used. 
  *  Otherwise the interrupt table located in flash will be used.
  *  See also the <system_*.c> file and how the SystemInit() function updates 
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  /* TODO - Add your application code here */

  /* Initialize LEDs */
  STM_EVAL_LEDInit(LED3);
  STM_EVAL_LEDInit(LED4);
  STM_EVAL_LEDInit(LED5);
  STM_EVAL_LEDInit(LED6);

  /* Turn on LEDs */
  STM_EVAL_LEDOn(LED3);
  STM_EVAL_LEDOn(LED4);
  STM_EVAL_LEDOn(LED5);
  STM_EVAL_LEDOn(LED6);

  const int self_node_id = 10;

  /*
    * Node initialization.
    * Node ID and name are required; otherwise, the node will refuse to start.
    * Version info is optional.
    */
  auto& node = getNode();

  node.setNodeID(self_node_id);

  node.setName("org.uavcan.tutorial.init");

  uavcan::protocol::SoftwareVersion sw_version;  // Standard type uavcan.protocol.SoftwareVersion
  sw_version.major = 1;
  node.setSoftwareVersion(sw_version);

  uavcan::protocol::HardwareVersion hw_version;  // Standard type uavcan.protocol.HardwareVersion
  hw_version.major = 1;
  node.setHardwareVersion(hw_version);

  /*
    * Start the node.
    * All returnable error codes are listed in the header file uavcan/error.hpp.
    */
  const int node_start_res = node.start();
  if (node_start_res < 0)
  {
      std::cout<<"Failed to start the node; error: " <<node_start_res;
  }
  /*
    * Informing other nodes that we're ready to work.
    * Default mode is INITIALIZING.
    */
  node.setModeOperational();

  /*
    * Some logging.
    * Log formatting is not available in C++03 mode.
    */
  node.getLogger().setLevel(uavcan::protocol::debug::LogLevel::DEBUG);
  node.logInfo("main", "Hello world! My Node ID: %*",
                static_cast<int>(node.getNodeID().get()));

  std::cout << "Hello world!" << std::endl;

  /*
    * Node loop.
    * The thread should not block outside Node::spin().
    */
  while (true)
  {
      /*
        * If there's nothing to do, the thread blocks inside the driver's
        * method select() until the timeout expires or an error occurs (e.g. driver failure).
        * All error codes are listed in the header uavcan/error.hpp.
        */
      const int res = node.spin(uavcan::MonotonicDuration::fromMSec(1000));
      if (res < 0)
      {
          std::cerr << "Transient failure: " << res << std::endl;
      }

      /*
        * Random status transitions.
        * In real applications, the status code shall reflect node's health.
        */
      const float random = std::rand() / float(RAND_MAX);
      if (random < 0.7)
      {
          node.setHealthOk();
      }
      else if (random < 0.9)
      {
          node.setHealthWarning();
      }
      else
      {
          node.setHealthError();
      }
  }
}


/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
extern "C" void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
  /* TODO, implement your code here */
  return;
}

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
extern "C" uint16_t EVAL_AUDIO_GetSampleCallBack(void){
  /* TODO, implement your code here */
  return -1;
}

